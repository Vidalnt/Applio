name: Pre-Compiled and Upload

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  NORMAL:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10.12"]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Download and extract pre-packaged dependencies
        run: |
          wget https://huggingface.co/IAHispano/Applio/resolve/main/Enviroment/Colab/tmp_packages.tar.gz?download=true -O prepackaged.tar.gz
          tar -xzf prepackaged.tar.gz -C /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/
      - name: Read version from config.json
        id: get-version
        run: |
          version=$(jq -r '.version' assets/config.json)
          echo "version=$version" >> $GITHUB_OUTPUT
      - name: Record initial state of site-packages
        run: |
          python -c "
          import csv
          import os
          def scan_and_write(base_path, output_file):
              with open(output_file, 'w', newline='') as f:
                  writer = csv.writer(f)
                  for dirpath, dirs, files in os.walk(base_path):
                      for filename in files:
                          fname = os.path.join(dirpath, filename)
                          try:
                              mtime = os.path.getmtime(fname)
                              writer.writerow([fname, mtime])
                          except Exception as e:
                              print(f'Skipping irrelevant nonexistent file {fname}: {str(e)}')
              print(f'Finished recording filesystem timestamps to {output_file}.')
          
          scan_and_write(\"/opt/hostedtoolcache/Python/3.10.12/x64\", \"./usr_files.csv\")"
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install torch==2.3.1 torchvision==0.18.1 torchaudio==2.3.1 --upgrade --index-url https://download.pytorch.org/whl/cu121
          pip install numpy==1.23.5
      - name: Record final state of site-packages
        run: |
          python -c "
          import csv
          import os
          def scan_and_write(base_path, output_file):
              with open(output_file, 'w', newline='') as f:
                  writer = csv.writer(f)
                  for dirpath, dirs, files in os.walk(base_path):
                      for filename in files:
                          fname = os.path.join(dirpath, filename)
                          try:
                              mtime = os.path.getmtime(fname)
                              writer.writerow([fname, mtime])
                          except Exception as e:
                              print(f'Skipping irrelevant nonexistent file {fname}: {str(e)}')
              print(f'Finished recording filesystem timestamps to {output_file}.')
          
          scan_and_write(\"/opt/hostedtoolcache/Python/3.10.12/x64\", \"./usr_files_new.csv\")"
      - name: Create TAR file
        run: |
          python -c "
          import tarfile
          import os
          from tqdm import tqdm
          import csv

          def compare_files(old_file, new_file):
              old_files = {}
              new_files = {}

              with open(old_file, 'r') as f:
                  reader = csv.reader(f)
                  old_files = {rows[0]: rows[1] for rows in reader}

              with open(new_file, 'r') as f:
                  reader = csv.reader(f)
                  new_files = {rows[0]: rows[1] for rows in reader}

              removed_files = old_files.keys() - new_files.keys()
              added_files = new_files.keys() - old_files.keys()
              unchanged_files = old_files.keys() & new_files.keys()

              changed_files = {f for f in unchanged_files if old_files[f] != new_files[f]}

              for file in removed_files:
                  print(f'File has been removed: {file}')

              for file in changed_files:
                  print(f'File has been updated: {file}')

              return list(added_files) + list(changed_files)

          changed_files = compare_files('./usr_files.csv', './usr_files_new.csv')
          base_dir = '/opt/hostedtoolcache/Python/3.10.12/x64/'
          arc_base_dir = 'usr/local/'
          with tarfile.open('./Pnpur.tar.gz', 'w:gz') as new_tar:
              for file in tqdm(changed_files, desc='Compressing', unit='files'):
                  relative_path = os.path.relpath(file, base_dir)
                  if 'python3.10' in relative_path:
                      if 'site-packages' not in relative_path:
                          continue
                      if 'site-packages' in relative_path:
                          relative_path = relative_path.replace('site-packages', 'dist-packages')
                  new_path = os.path.join(arc_base_dir, relative_path)
                  new_tar.add(file, arcname=new_path)
          "
      - name: Log ZIP file size
        run: |
          TAR_SIZE=$(du -m "Pnpur.tar.gz" | cut -f1)
          echo "TAR.GZ file size is: $TAR_SIZE MB"

      
          
  UV:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10.12"]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Read version from config.json
        id: get-version
        run: |
          version=$(jq -r '.version' assets/config.json)
          echo "version=$version" >> $GITHUB_OUTPUT
      - name: Install dependencies
        run: |
          pip install uv
          uv venv .venv
          uv pip install -r requirements.txt
          uv pip install torch==2.3.1 torchvision==0.18.1 torchaudio==2.3.1 --upgrade --index-url https://download.pytorch.org/whl/cu121
          uv pip install numpy==1.23.5
      - name: Create TAR file
        run: |
          python -c "
          import tarfile
          import os
          from tqdm import tqdm

          def create_tar(base_path: str, ignore_list: list, tar_filename: str):
            files_to_add = [
            os.path.join(root, name)
            for root, _, files in os.walk(base_path)
            for name in files
            if not any(ignore in os.path.join(root, name) for ignore in ignore_list)
            ]
            with tarfile.open(tar_filename, 'w:gz') as tar:
              for file in tqdm(files_to_add, desc='Compressing', unit='file'):
                try:
                  tar.add(file)
                except FileNotFoundError as e:
                  print(f'Warning: File not found: {file}. Skipping. Error: {e}')
          base_path = '/home/runner/work/Applio/Applio/.venv'
          tar_filename = './Pnpur.tar.gz'
          ignore_list = [
          '.venv/CACHEDIR.TAG',
          '.venv/pyvenv.cfg',
          '.venv/.gitignore',
          '.venv/bin/activate.fish',
          '.venv/bin/activate_this.py',
          '.venv/bin/deactivate.bat',
          '.venv/bin/activate.nu',
          '.venv/bin/python3',
          '.venv/bin/activate.ps1',
          '.venv/bin/pydoc.bat',
          '.venv/bin/activate.csh',
          '.venv/bin/python',
          '.venv/bin/activate',
          '.venv/bin/activate.bat',
          '.venv/bin/python3.11',
          '.venv/lib/python3.11',
          '.venv/lib/python3.11/site-packages',
          '.venv/lib/python3.11/site-packages/_virtualenv.pth',
          '.venv/lib/python3.11/site-packages/_virtualenv.py'
          ]
          create_tar(base_path, ignore_list, tar_filename)
          "
      - name: Log ZIP file size
        run: |
          ZIP_SIZE=$(du -m "Pnpur.tar.gz" | cut -f1)
          echo "ZIP file size is: $ZIP_SIZE MB"

      - name: Upload Colab Env
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          version: ${{ steps.get-version.outputs.version }}
        run: |
          python -c "
          import os
          from huggingface_hub import login, upload_file
            
          token = os.getenv('HF_TOKEN')
          version = os.getenv('version')
          login(token)
          repo_id = 'vidalnt/nothing'
          repo_file_path = 'Pnpur.tar.gz'
            
          upload_file(
          commit_message=f'{version}',
          path_or_fileobj=repo_file_path,
          path_in_repo=f'Enviroment/Colab/{repo_file_path}',
          repo_id=repo_id,
          token=token)
          "

